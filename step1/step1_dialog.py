# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StepOneDialog
                                 A QGIS plugin
 Maybe this time Qt5 wont suddenly fail
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-24
        git sha              : $Format:%H$
        copyright            : (C) 2024 by me
        email                : mercerraa@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import (
    QgsVectorLayer,
    QgsGeometry,
    QgsFeatureRequest,
    QgsField,
    QgsFeature,
    QgsPoint,
    QgsPolygon,
    QgsProject
    
)
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'step1_dialog_base.ui'))


class StepOneDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(StepOneDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.cmbxSelectVector.layerChanged.connect(self.layerSelectChange)
        self.layerSelectChange()
        self.bbOKCancel.accepted.connect(self.calculateCounts)

    def layerSelectChange(self):
        selectedLayer = self.cmbxSelectVector.currentLayer()
        if selectedLayer:
            self.cmbxSelectField.setLayer(selectedLayer)
            

    def calculateCounts(self):
        layer = self.cmbxSelectVector.currentLayer()
        total = layer.featureCount()
        print("Layer: {0} has {1} objects".format(layer.name(), total))
        fieldName = self.cmbxSelectField.currentField()
        print("Field name: {}".format(fieldName))
        fieldIndex = layer.fields().indexOf(fieldName)
        fieldValues = list(layer.uniqueValues(fieldIndex))
        fieldValues.sort()
        uniqueValues = len(fieldValues)
        currentCrs = layer.crs()
        centroidLayerName = layer.name() + "_centroids"
        centroidLayer = QgsVectorLayer("Point", centroidLayerName, "memory")
        centroidLayer.setCrs(currentCrs)
        centroidLayerDP = centroidLayer.dataProvider()
        centroidLayerDP.addAttributes([QgsField(fieldName, QVariant.String),
            QgsField("count", QVariant.Int),
            QgsField("percentage", QVariant.Double)])
        centroidLayer.updateFields()
        for i in range(uniqueValues):
            searchTerm = "\"{0}\"  IS  '{1}' ".format(fieldName, fieldValues[i])
            selection = layer.getFeatures(QgsFeatureRequest().setFilterExpression(searchTerm))
            selectionList = []
            geometryList = []
            for member in selection:
                selectionList.append(member)
                geometryList.append(member.geometry())
            #print("selectionList: ",selectionList)
            valueCount = len(selectionList)
            print("{0}: {1}".format(fieldValues[i],valueCount))
            #print("geometryList: ", geometryList)
            #print("collected type: ",type(collected))
            #print(collected)
            collected = QgsGeometry.collectGeometry(geometryList)
            centroid = collected.centroid()
            #print(type(centroid))
            #print(centroid)
            newFeature = QgsFeature()
            newFeature.setGeometry(QgsGeometry.fromPointXY(centroid.asPoint()))
            percent = valueCount/total
            newFeature.setAttributes([fieldValues[i], valueCount, percent])
            centroidLayerDP.addFeatures([newFeature])
            centroidLayerDP.updateExtents()
        QgsProject.instance().addMapLayer(centroidLayer)
        iface.setActiveLayer(centroidLayer)
        iface.zoomToActiveLayer()
