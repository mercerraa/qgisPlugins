# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AggregateCentroidDialog
                                 A QGIS plugin
 Centroids and counts of attributes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-31
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Andrew Mercer
        email                : mercerraa@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import re
import sys

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import (
    QgsVectorLayer,
    QgsGeometry,
    QgsFeatureRequest,
    QgsField,
    QgsFeature,
    QgsPoint,
    QgsPolygon,
    QgsProject,
    QgsPalLayerSettings,
    QgsTextFormat,
    QgsFontUtils,
    QgsTextBufferSettings,
    QgsVectorLayerSimpleLabeling,
    NULL
)
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface
from PyQt5.QtGui import QFont, QColor
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'aggregate_centroid_dialog_base.ui'))


class AggregateCentroidDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(AggregateCentroidDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.mlcbLayerSelect.layerChanged.connect(self.layerSelectChange)
        self.layerSelectChange()

        self.bbOKCancel.accepted.connect(self.startMain)

    def layerSelectChange(self):
        """Set the layer to fetch field list from"""
        selectedLayer = self.mlcbLayerSelect.currentLayer()
        if selectedLayer:
            self.fewExpression1.setLayer(selectedLayer)
            self.fewExpression2.setLayer(selectedLayer)

    def startMain(self):
        layer = self.cmbxSelectVector.currentLayer()
        featureTotal = layer.featureCount()
        currentCrs = layer.crs()
        centroidLayerName = layer.name() + "_centroids"
        centroidLayer = QgsVectorLayer("Point", centroidLayerName, "memory")
        centroidLayer.setCrs(currentCrs)
        centroidLayerDP = centroidLayer.dataProvider()

        if self.fewExpression1.isExpression()==True:
            expression1 = self.fewExpression1.expression()
            exp1FieldName = re.search('\"[\w]*\"',expression1).group()
        else:
            exp1FieldName = self.fewExpression1.currentField()[0]
            exp1FieldIndex = layer.fields().indexOf(exp1FieldName)
            exp1FieldValues = list(layer.uniqueValues(exp1FieldIndex))
            exp1FieldValues.sort()
            unique1Values = len(exp1FieldValues)
            for i in range(unique1Values):
                if exp1FieldValues[i] == NULL:
                    expression1 = "\"{0}\"  IS  {1} ".format(exp1FieldName, exp1FieldValues[i])
                else:
                    expression1 = "\"{0}\"  IS  '{1}' ".format(exp1FieldName, exp1FieldValues[i])
        
        selection1 = layer.getFeatures(QgsFeatureRequest().setFilterExpression(expression1))
        selection1List = []
        geometry1List = []
        for member in selection1:
            selection1List.append(member)
            geometry1List.append(member.geometry())
        value1Count = len(selection1List)
        attribute1Name = expression1
        attribute1List = [attribute1Name, value1Count]
        centroidLayerDP.addAttributes([QgsField(attribute1Name, QVariant.String), QgsField("Of_"+featureTotal, QVariant.Int)])
        centroidLayer.updateFields()
        centroid1 = addCentroid( geometry1List, attribute1List, centroidLayerDP)
        if centroid1 == 1:
            self.addLayerToMap(attribute1Name, centroidLayer)

    def addCentroid(self, geometryList, attributeList, centroidLayerDP):
        collected = QgsGeometry.collectGeometry(geometryList)
        if collected.isEmpty():
            iface.messageBar().pushMessage("Error", "No matches found. No centroid can be created.", level=1, duration=3)
            return 0
        centroid = collected.centroid()
        newFeature = QgsFeature()
        newFeature.setGeometry(QgsGeometry.fromPointXY(centroid.asPoint()))
        newFeature.setAttributes(attributeList)
        centroidLayerDP.addFeatures([newFeature])
        centroidLayerDP.updateExtents()
        return 1

    def addLayerToMap(self, labelField, centroidLayer):
        layer_settings  = QgsPalLayerSettings()
        text_format = QgsTextFormat()
        text_format.setFont(QFont("Arial", 10))
        text_format.setSize(10)

        buffer_settings = QgsTextBufferSettings()
        buffer_settings.setEnabled(True)
        buffer_settings.setSize(1)
        buffer_settings.setColor(QColor("white"))

        text_format.setBuffer(buffer_settings)
        layer_settings.setFormat(text_format)
        layer_settings.fieldName = labelField
        #layer_settings.placement = 2
        layer_settings.enabled = True
        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
        centroidLayer.setLabelsEnabled(True)
        centroidLayer.setLabeling(layer_settings)
        centroidLayer.triggerRepaint()
        QgsProject.instance().addMapLayer(centroidLayer)
        iface.setActiveLayer(centroidLayer)
        iface.zoomToActiveLayer()
        iface.messageBar().pushMessage("Done", "Centroid layer created", level=3, duration=3)
